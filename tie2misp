#!/usr/bin/env python3

"""
################################################################################
#                  ____  __  ____  ____  __  __  __  ____  ____                #
#                 (_  _)(  )(  __)(___ \(  \/  )(  )/ ___)(  _ \               #
#                   )(   )(  ) _)  / __//      \ )( \___ \ ) __/               #
#                  (__) (__)(____)(____)\_ )(_ /(__)(____/(__)                 #
#                                                                              #
################################################################################

DCSO TIE2MISP Converter

Copyright (c) 2017, DCSO GmbH
Project   - https://github.com/DCSO/tie2misp
Mezzonian - https://github.com/Mezzonian
"""

import click
from datetime import datetime, timedelta
from model import Config
from model import Tags
from loader import Loader
import logging
import sys
import signal as signal_module
from urllib.parse import urlparse
import os


# CTRL+C Handler --------------------------------------------------------------
def signal_handler(signal_name, frame):
    try:
        logging.info("------------------------------------------\n")
        logging.info('TIE2MISP has been interrupted. Shutting down flux capacitor.')
    except Exception as e:
        print('TIE2MISP has been interrupted. Shutting down flux capacitor.')
    sys.exit(0)


# INIT TIE2MISP --------------------------------------------------------------
@click.command()
@click.argument('type')
@click.option('--searchfile', type=click.File('r', None, 'strict', None, False))
@click.option('--delay', default=0, help='Specify a delay from which data should be analyzed starting at the current '
                                         'date.\n\n As example:\n The current date is 2017-03-16 (YYYY-MM-DD). With '
                                         '--delay 1 the converter would start at 2017-03-15')
@click.option('--file', is_flag=True, help='If used, the converter will create an JSON event file with all processed '
                                           'attributes.')
@click.option('--noupload', is_flag=True, help='If used, the converter will not upload the processed attributes to the '
                                               'MISP. Usefull in combination with --file to create only a local output '
                                               'file.')
@click.option('--date', help='If a date is set, instead of using the actual date the converter will use the '
                             'given date. The date must be given in the following format YYYY-MM-DD.')
@click.option('--loglvl', default=20, help='Sets the log level. Default is 20.\n Params are: 0 - NOTSET / 10 - DEBUG / '
                                           '20 - INFO / 30 - WARNING / 40 - ERROR / 50 - CRITICAL')
@click.option('--disable_console_log', is_flag=True, help='If used, the convert will not generate output in the '
                                                          'console')
@click.option('--disable_file_log', is_flag=True, help='If used, the converter will not generate a file output')
@click.option('--severity', type=int, help='Events with a severity value lower than the given value will not be '
                                           'converted. If used, the converter will ignore the severity value defined '
                                           'in the config file. The severity value can be equal or between 0 and 5.')
@click.option('--confidence', type=int, help='Events with a confidence value lower than the given value will not be '
                                             'converted. If used, the converter will ignore the severity value defined '
                                             'in the config file. The confidence value can be equal or between 0 and '
                                             '100')
@click.option('--proxy_http', type=str, help='Sets the address for a http based proxy e.g. http://10.8.0.1:8000')
@click.option('--proxy_https', type=str, help='Sets the address for a https based proxy e.g. https://10.8.0.1:8000')
@click.option('--proxy_misp_http', type=str, help='Sets the address for a http based proxy e.g. http://10.8.0.1:8000. '
                                                  'The proxy will only be used for the connection to MISP. If set, the'
                                                  'global parameter HTTP_PROXY and the \'--proxy_http\' will be ignored'
                                                  '')
@click.option('--proxy_misp_https', type=str, help='Sets the address for a https based proxy e.g. https://10.8.0.1:8000. '
                                                  'The proxy will only be used for the connection to MISP. If set, the'
                                                  'global parameter HTTP_PROXY and the \'--proxy_http\' will be ignored'
                                                  '')
@click.option('--proxy_tie_http', type=str, help='Sets the address for a http based proxy e.g. http://10.8.0.1:8000. '
                                                  'The proxy will only be used for the connection to TIE. If set, the'
                                                  'global parameter HTTP_PROXY and the \'--proxy_http\' will be ignored'
                                                  '')
@click.option('--proxy_tie_https', type=str, help='Sets the address for a https based proxy e.g. https://10.8.0.1:8000. '
                                                  'The proxy will only be used for the connection to TIE. If set, the'
                                                  'global parameter HTTP_PROXY and the \'--proxy_http\' will be ignored'
                                                  '')
def init(type, delay, file, noupload, date, loglvl, disable_console_log,
         disable_file_log, severity, confidence, searchfile,
         proxy_http, proxy_https,
         proxy_misp_http, proxy_misp_https,
         proxy_tie_http, proxy_tie_https):
    """
    Starting the converter with a given type of events that should be created.

    Choseable types:
    c2server, malware, actors, family
    """
    error = False
    given_date = ''
    loglvl_set = False
    confidence_set = False
    severity_set = False
    proxy_misp_addr = dict()
    proxy_tie_addr = dict()

    # Signal handler for CTRL+C
    signal_module.signal(signal_module.SIGINT, signal_handler)

    #check loglvl
    if isinstance(loglvl, int):
        if loglvl < 0 or loglvl > 50:
            click.echo(
                'loglvl must be equal or between 0 and 50. Type \'python tie2misp.py --help\' for'
                ' more information\'s.\nSet default value: 20')
            loglvl = 20
    else:
        click.echo('loglvl must be an unsigned integer value equal or between 0 and 50. Type \'python tie2misp.py '
                   '--help\' for more information\'s.\nSet default value: 20' )
        loglvl = 20
    Loader.init_logger(sys.path[0], "tie2misp", loglvl, disable_console_log, disable_file_log)
    try:
        # Check parsing mode
        if type == 'c2server':
            pass
        elif type == 'malware':
            pass
        elif type == 'actor':
            if searchfile is not None:
               pass
            else:
                raise_error_critical('Argument actor only works with a given file. Use --searchlist to declare an file for input')
        elif type == 'family':
            if searchfile is not None:
               pass
            else:
                raise_error_critical('Argument actor only works with a given file. Use --searchlist to declare an file for input')
        else:
            raise_error_critical('Wrong Argument! Type \'python tie2misp.py --help\' for more information\'s')

        # Check date arguments
        if date is not None:
            try:
                given_date = datetime.strptime(date, "%Y-%m-%d")
            except ValueError:
                raise_error_critical('Date could not be converted. Please use the following format YYYY-MM-DD')

        if isinstance(delay, int):
            if delay >= 0:
                pass
            else:
                raise_error_critical('Delay must be an unsigned integer value')
        else:
            raise_error_critical('Delay must be an unsigned integer value')

        # Check confidence
        if confidence is not None:
            if isinstance(confidence, int):
                if confidence < 0 or confidence > 100:
                    raise_error_critical('The confidence value must be an unsigned integer value equal or between 0 and 100')
                else:
                    confidence_set = True
            else:
                raise_error_critical('The confidence value must be an unsigned integer value')

        # Check severity
        if severity is not None:
            if isinstance(severity, int):
                if severity < 0 or severity > 5:
                    raise_error_critical('The severity value must be an unsigned integer value equal or between 0 and 5')
                else:
                    severity_set = True
            else:
                raise_error_critical('The severity value must be an unsigned integer value')

        # Check Proxy variables
        ## First check if a Proxy for TIE or MISP has been set
        single_proxy_set = False
        if proxy_misp_http is not None or proxy_misp_https is not None:
            proxy_misp_addr = checkProxyUrls(proxy_misp_http, proxy_misp_https, False)
            single_proxy_set = True
        if proxy_tie_http is not None or proxy_tie_https is not None:
            proxy_tie_addr = checkProxyUrls(proxy_tie_http, proxy_tie_https, False)
            single_proxy_set = True
        if not single_proxy_set:
            if proxy_http is not None or os.environ.get('HTTP_PROXY') or proxy_https is not None or os.environ.get('HTTPS_PROXY'):
                proxy_tie_addr = proxy_misp_addr = checkProxyUrls(proxy_http, proxy_https, True)


        #### everything is fine -> start up
        # Loading config file
        try:
            # Load config and tags
            conf = Config.parse("settings/config.yml")
            tags = Tags.parse("settings/tags.yml")

            if severity_set:
                conf.base_severity = severity

            if confidence_set:
                conf.base_severity = confidence

            # calculate start date
            logging.info("Powering up flux capacitor. Starting up TIE2MISP.")
            logging.info("#### Start new TIE-Querry: " + type + " ####")
            if given_date != '':
                Loader.start(conf, tags, type, given_date, file, noupload, searchfile, proxy_misp_addr, proxy_tie_addr)
            else:
                dt = datetime.now() - timedelta(days=delay)
                Loader.start(conf, tags, type, dt, file, noupload, searchfile, proxy_misp_addr, proxy_tie_addr)
        except FileNotFoundError:
            logging.error("Error: \nconfig.yml and/or tags.yml not found")

    except (RuntimeError, TypeError) as ex:
        click.echo(ex)


def checkProxyUrls(proxy_http, proxy_https, system_proxy=True):
    url_http = None
    url_https = None
    proxy_addrs = dict()

    if proxy_http is not None:
        url_http = urlparse(proxy_http)
    elif system_proxy:
        if os.environ.get('HTTP_PROXY'):
            url_http = urlparse(os.environ['HTTP_PROXY'])
    if proxy_https is not None:
        url_https = urlparse(proxy_https)
    elif system_proxy:
        if os.environ.get('HTTPS_PROXY'):
            url_https = urlparse(proxy_https)

    #check if HTTP attributes are valid
    if url_http is not None:
        if url_http.scheme is None or url_http.port is None or url_http.hostname is None:
            raise_error_critical('HTTP Proxy address ist not valid. Type \'python tie2misp.py --help\' for more information\'s.')
        if url_http.scheme != 'http':
            raise_error_critical('HTTP Proxy address must have a valid scheme')
        if url_http.port <= 0 or url_http.port > 65535:
            raise_error_critical('HTTP Proxy address must have a valid port')
        if len(url_http.hostname) <= 2:
            raise_error_critical('HTTP Proxy address is to short or not valid ')
        # Address should be valid
        proxy_addrs['http'] = str(url_http.scheme + "://" + url_http.netloc)

    # check if HTTPS attributes are valid
    if url_https is not None:
        if url_https.scheme is None or url_https.port is None or url_https.hostname is None:
            raise_error_critical('HTTPS Proxy address ist not valid. Type \'python tie2misp.py --help\' for more information\'s.')
        if url_https.scheme !='https':
            raise_error_critical('HTTPS Proxy address must have a valid scheme')
        if url_https.port <= 0:
            raise_error_critical('HTTP Proxy address must have a valid port')
        if len(url_https.hostname) <= 2:
            raise_error_critical('HTTP Proxy address is to short or not valid ')
        # Address should be valid
        proxy_addrs['https'] = str(url_https.scheme + "://" + url_https.netloc)


    return proxy_addrs


def raise_error_critical(error_str):
    ERROR_BASE_STR = "Error starting tie2misp: "
    logging.error(ERROR_BASE_STR + error_str)
    raise RuntimeError(ERROR_BASE_STR + error_str)


def raise_error_warning(error_str):
    ERROR_BASE_STR = "Error starting tie2misp: "
    logging.warning(ERROR_BASE_STR + error_str)


# MAIN ################################################################
if __name__ == '__main__':
    init()
